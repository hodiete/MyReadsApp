{"version":3,"sources":["books-api/BooksAPI.js","components/Authors.js","components/SelectOptions.js","components/Book.js","components/Search.js","components/BookShelf.js","components/Dashboard.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Authors","_ref","authors","react_default","a","createElement","Fragment","map","author","i","key","className","SelectOptions","handleShelfChange","e","_this","props","target","value","_this$props","this","getBookStatus","onChange","undefined","disabled","title","option","React","Component","Book","updateBookShelf","bookItem","style","width","height","backgroundImage","imageLinks","thumbnail","components_SelectOptions","components_Authors","Search","state","error","results","getSearchItems","setState","BooksAPI","toConsumableArray","catch","console","handleChange","prevProps","prevState","_this$state","react_router_dom","to","type","placeholder","length","result","components_Book","BookShelf","loaded","currentShelf","Dashboard","ListOfBooksAndShelves","_ref2","components_BookShelf","BooksApp","arrangeShelf","filter","removeFromShelf","oldBook","getAllBooks","oldBooks","log","FoundBook","find","bookShelf","componentDidMount","_this2","react_router","exact","path","render","components_Dashboard","components_Search","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.94b45fd7.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n  * @description  Author component which creates the book authors\n  * @return {object} return authors\n  * @param {array} authors  List of Authors\n\n  *\n  */\nfunction Authors({ authors }) {\n return (\n  <React.Fragment>\n   {authors.map((author, i) => (\n    <div key={i} className=\"book-authors\">\n     {author}\n    </div>\n   ))}\n  </React.Fragment>\n );\n}\n\nAuthors.propTypes = {\n authors: PropTypes.array.isRequired,\n};\n\nexport default Authors;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n/**\n * @description A select component that has a select tag and a list of options available\n * i.e. currently Reading , want to read and read\n */\nclass SelectOptions extends React.Component {\n static propTypes = {\n  handleShelfChange: PropTypes.func,\n  book: PropTypes.object,\n  getBookStatus: PropTypes.func,\n };\n /**\n  * @description  Listens to each option change and then calls the handleshelf change in book to update the state according \n  * assigning the book a new shelf name\n  * @return {void}\n  * @param {object} e   The event object\n\n  *\n  */\n handleShelfChange = (e) => {\n  this.props.handleShelfChange(this.props.book, e.target.value);\n };\n render() {\n  const { book, getBookStatus } = this.props;\n  //array with the title and corresponding shelf name\n  const options = [\n   { title: \"Currently Reading\", shelf: \"currentlyReading\" },\n   { title: \"Want to Read\", shelf: \"wantToRead\" },\n   { title: \"Read\", shelf: \"read\" },\n   { title: \"None\", shelf: null },\n  ];\n\n  return (\n   <React.Fragment>\n    <div className=\"book-shelf-changer\">\n     <select\n      onChange={this.handleShelfChange}\n      value={book.shelf === undefined ? getBookStatus(book) : book.shelf}>\n      <option value=\"move\" disabled>\n       Move to...\n      </option>\n      {options.map((option, i) => (\n       <option key={i} value={option.shelf}>\n        {option.title}\n       </option>\n      ))}\n     </select>\n    </div>\n   </React.Fragment>\n  );\n }\n}\n\nexport default SelectOptions;\n","import React from \"react\";\nimport Authors from \"./Authors\";\nimport SelectOptions from \"./SelectOptions\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @description  A book component consistinh of image, title, author and select options\n *\n */\nclass Book extends React.Component {\n static propTypes = {\n  bookItem: PropTypes.object,\n  getBookStatus: PropTypes.func,\n  updateBookShelf: PropTypes.func,\n };\n\n /**\n  * @description  Checks if the shelf has change for the a book and calls the update bookshelf function\n  * to update the book and its shelf\n  * @param {object} book   A book\n  * @param {string} shelf A shelf\n  *\n  */\n handleShelfChange = (book, shelf) => {\n  if (shelf === null) {\n   delete book[shelf];\n  } else if (book.shelf !== shelf) {\n   this.props.updateBookShelf(book, shelf);\n  }\n };\n render() {\n  const { bookItem, getBookStatus } = this.props;\n  // seeting a default image if no image is found on the book object\n  const defaultImage =\n   \" http://books.google.com/books/content?id=1yx1tgAACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api\";\n\n  return (\n   <React.Fragment>\n    <li>\n     <div className=\"book\">\n      <div className=\"book-top\">\n       <div\n        className=\"book-cover\"\n        style={{\n         width: 128,\n         height: 193,\n         backgroundImage:\n          bookItem.imageLinks === undefined\n           ? `url(\n             ${defaultImage}\n             )`\n           : `url(${bookItem.imageLinks.thumbnail})`,\n        }}\n       />\n       <SelectOptions\n        book={bookItem}\n        handleShelfChange={this.handleShelfChange}\n        getBookStatus={getBookStatus}\n       />\n      </div>\n      <div className=\"book-title\">{bookItem.title}</div>\n\n      <Authors authors={!bookItem.authors ? [] : bookItem.authors} />\n     </div>\n    </li>\n   </React.Fragment>\n  );\n }\n}\n\nexport default Book;\n","import React from \"react\";\nimport * as BooksAPI from \"../books-api/BooksAPI\";\nimport { Link } from \"react-router-dom\";\nimport Book from \"./Book\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @description Search Component which has a query to search for each component in the BooksApi\n * contains an error state for error handling and an array to list the results based on the query\n */\n\nclass Search extends React.Component {\n static propTypes = {\n  query: PropTypes.string,\n  error: PropTypes.string,\n  result: PropTypes.array,\n };\n state = {\n  query: \"\",\n  error: null,\n  results: [],\n };\n\n /**\n  * @description  gets the list of search items based on the query, if the query is empty\n  * the results wil be empty, if the book isn't found the error handler will update accordingly and\n  * if the book is found then the results state wil be updated\n  * @param {string} query   query item to be searched\n  *\n  */\n getSearchItems = (query) =>\n  query === \"\"\n   ? this.setState({\n      results: [],\n     })\n   : BooksAPI.search(query)\n      .then((books) =>\n       books.error\n        ? this.setState({\n           results: [],\n           error: \"Sorry, No Books Found\",\n          })\n        : this.setState({\n           results: [...books],\n           error: null,\n          })\n      )\n      .catch((error) => {\n       console.error(error);\n       this.setState({ error: \"Oops. Something went Wrong\" });\n      });\n\n /**\n  * @description  listens for when the input has been updated and then updates the state\n  * of the query\n  * @param {object} e event object\n  *\n  */\n handleChange = (e) => {\n  this.setState({\n   query: e.target.value,\n  });\n };\n\n componentDidUpdate(prevProps, prevState) {\n  if (prevState.query !== this.state.query) {\n   this.getSearchItems(this.state.query);\n  }\n }\n\n render() {\n  const { query, error, results } = this.state;\n  const { updateBookShelf, getBookStatus } = this.props;\n  return (\n   <div className=\"app\">\n    <div className=\"search-books\">\n     <div className=\"search-books-bar\">\n      <Link className=\"close-search\" to=\"/\">\n       Close\n      </Link>\n\n      <div className=\"search-books-input-wrapper\">\n       <input\n        type=\"text\"\n        placeholder=\"Search by title or author\"\n        value={query}\n        onChange={this.handleChange}\n       />\n      </div>\n     </div>\n     {error ? (\n      <div className=\"search-books-results\"> {error} </div>\n     ) : (\n      <div className=\"search-books-results\">\n       {results.length > 0 && <div> {results.length} books Found</div>}\n       <ol className=\"books-grid\">\n        {results.map((result, i) => (\n         <Book\n          key={i}\n          bookItem={result}\n          updateBookShelf={updateBookShelf}\n          getBookStatus={getBookStatus}\n         />\n        ))}\n       </ol>\n      </div>\n     )}\n    </div>\n   </div>\n  );\n }\n}\n\nexport default Search;\n","import React from \"react\";\nimport Book from \"./Book\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @description  Dashboard contains the Myreadapp Bookshelves\n * @return {object} the dashboard with all the bookshelves\n * @param {string} error  error if available\n * @param {boolean} loaded when the app has loaded or not\n * @param {object} ListOfBooksAndShelves list the books and shelves\n * @param {function} updateBookShelf function that updates book shelf\n *\n */\nfunction BookShelf({ books, title, loaded, updateBookShelf }) {\n return (\n  <div className=\"bookshelf\">\n   {loaded && <h2 className=\"bookshelf-title\">{title}</h2>}\n   <div className=\"bookshelf-books\">\n    <ol className=\"books-grid\">\n     {books.length === 0 ? (\n      <div> There are currently no books on this shelf</div>\n     ) : (\n      books.map((book, i) => (\n       <Book\n        key={i}\n        bookItem={book}\n        currentShelf={book.shelf}\n        updateBookShelf={updateBookShelf}\n       />\n      ))\n     )}\n    </ol>\n   </div>\n  </div>\n );\n}\n\nBookShelf.propTypes = {\n books: PropTypes.array.isRequired,\n title: PropTypes.string.isRequired,\n loaded: PropTypes.bool,\n updateBookShelf: PropTypes.func.isRequired,\n};\n\nexport default BookShelf;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BookShelf from \"./BookShelf\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @description  Dashboard contains the Myreadapp Bookshelves\n * @return {object} the dashboard with all the bookshelves\n * @param {string} error  error if available\n * @param {boolean} loaded when the app has loaded or not\n * @param {object} ListOfBooksAndShelves list the books and shelves\n * @param {function} updateBookShelf function that updates book shelf\n *\n */\nfunction Dashboard({ error, loaded, ListOfBooksAndShelves, updateBookShelf }) {\n return (\n  <div className=\"app\">\n   <div className=\"list-books\">\n    <div className=\"list-books-title\">\n     <h1>MyReads</h1>\n    </div>\n    <div className=\"list-books-content\">\n     <div className=\"bookshelf\">\n      {error && <div>{error}</div>}\n      {loaded &&\n       ListOfBooksAndShelves.map(({ title, books }, i) => (\n        <BookShelf\n         key={i}\n         title={title}\n         books={books}\n         loaded={loaded}\n         updateBookShelf={updateBookShelf}\n        />\n       ))}\n      <div className=\"open-search\">\n       <Link className=\"open-search\" to=\"/search\">\n        Add a book\n       </Link>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n );\n}\n\nDashboard.propTypes = {\n error: PropTypes.string,\n loaded: PropTypes.bool,\n ListOfBooksAndShelves: PropTypes.array.isRequired,\n updateBookShelf: PropTypes.func.isRequired,\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Route } from \"react-router-dom\";\nimport Search from \"../components/Search\";\nimport * as BooksAPI from \"../books-api/BooksAPI\";\nimport PropTypes from \"prop-types\";\nimport Dashboard from \"../components/Dashboard\";\n\n/**\n * @description BooksApp which renders the Dashboard or Search page depending on the route\n */\n\nclass BooksApp extends React.Component {\n static propTypes = {\n  books: PropTypes.array,\n  error: PropTypes.string,\n  loaded: PropTypes.bool,\n };\n\n /**\n  * @description States of the BooksApp\n  * @param {array} books - Collection of books\n  * @param {string} error - The author of the book\n  */\n state = {\n  books: [],\n  error: null,\n  loaded: false,\n };\n /**\n  * @description Sorts the books by the shelf name\n  * @return {array} a filtered array of books by its shelf name\n  * @param {array} books - Collection of books\n  * @param {string} shelf - the name of the shelf\n  */\n arrangeShelf = (books, shelf) => {\n  return books.filter((book) => book.shelf === shelf);\n };\n\n /**\n  * @description A function that removes an object from it's previous shelf\n  * @return {array}  a filtered array of books by its shelf name\n  * @param {array} books - Collection of books\n  * @param {object} oldBook - A book object\n  */\n removeFromShelf = (books, oldBook) => {\n  return books.filter((book) => book.title !== oldBook.title);\n };\n\n /**\n  * @description gets a collection of books from the Books Api and puts them in the\n  * books state if available, if not, it updates the error state that something happened\n  * the loaded state is also updated depending on whether or not the information was loaded correctly\n  * @return {void} an array of books\n  */\n getAllBooks = () => {\n  BooksAPI.getAll()\n   .then((books) => {\n    if (!books) {\n     this.setState({\n      error: books.error,\n      loaded: false,\n     });\n    }\n    this.setState({\n     loaded: true,\n     books,\n     error: null,\n    });\n   })\n   .catch((error) => {\n    console.error(error);\n    this.setState({ error: \"Oops. Something went Wrong\" });\n   });\n };\n\n /**\n  * @description removes the object from the previous shelf and adds it to the new shelf as well as updates\n  * the books API that this change has occurred for data persistence\n  * @return {void}\n  * @param {object} book - A book\n  * @param {string} shelf- A Shelf\n  */\n updateBookShelf = (book, shelf) => {\n  const oldBooks = this.removeFromShelf(this.state.books, book);\n  book.shelf = shelf;\n  this.setState({\n   books: [...oldBooks, book],\n  });\n  BooksAPI.update(book, shelf).catch((error) => {\n   console.log(error);\n   this.setState({ error: \"Oops. Something went Wrong\" });\n  });\n };\n\n /**\n  * @description  Finds if the book has a shelf, if not assign it a None value\n  * @return {string}  The shelf name\n  * @param {object} book - A book\n  */\n getBookStatus = (book) => {\n  const FoundBook = this.state.books.find(\n   (bookShelf) => bookShelf.title === book.title\n  );\n  return FoundBook ? FoundBook.shelf : \"None\";\n };\n\n /**\n  * @description  updates the state by calling the getallbook after the component is mounted\n  */\n componentDidMount = () => {\n  this.getAllBooks();\n };\n render() {\n  const { error, loaded, books } = this.state;\n  //creating an array that list the books and shelves\n  const ListOfBooksAndShelves = [\n   {\n    title: \"Currently Reading\",\n    books: this.arrangeShelf(books, \"currentlyReading\"),\n    shelf: \"currentlyReading\",\n   },\n   {\n    title: \"Want to Read\",\n    books: this.arrangeShelf(books, \"wantToRead\"),\n    shelf: \"wantToRead\",\n   },\n   { title: \"Read\", books: this.arrangeShelf(books, \"read\"), shelf: \"read\" },\n  ];\n  return (\n   <div>\n    <Route\n     exact\n     path=\"/\"\n     render={() => (\n      <Dashboard\n       error={error}\n       loaded={loaded}\n       ListOfBooksAndShelves={ListOfBooksAndShelves}\n       updateBookShelf={this.updateBookShelf}\n      />\n     )}\n    />\n    <Route\n     exact\n     path=\"/search\"\n     render={() => (\n      <Search\n       updateBookShelf={this.updateBookShelf}\n       getBookStatus={this.getBookStatus}\n      />\n     )}\n    />\n   </div>\n  );\n }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <BrowserRouter>\n  <App/>\n </BrowserRouter>,\n document.getElementById(\"root\")\n);\n"],"sourceRoot":""}